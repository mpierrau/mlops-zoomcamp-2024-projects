name: CD Deploy
on:
  push:
    branches:
      - 'develop'
    paths:
      - 'testing/06-best-practices/code/**'

env:
  AWS_DEFAULT_REGION: "us-east-1"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
            aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      # Define infrastructure
      - name: TF Plan
        id: tf-plan
        working-directory: "testing/06-best-practices/code/infrastructure"
        run: |
          terraform init -backend-config="key=mlops-zoomcamp-prod.tfstate" --reconfigure && terraform plan --var-file vars/production.tfvars 

      - name: TF Apply
        id: tf-apply
        working-directory: "testing/06-best-practices/code/infrastructure"
        if: ${{ steps.tf-plan.outcome }} == 'success'
        run: |
          terraform apply -auto-approve --var-file vars/production.tfvars
          echo "::set-output name=ecr_repo::$(terraform output ecr_repo | xargs)"
          echo "::set-output name=predictions_stream_name::$(terraform output predictions_stream_name | xargs)"                
          echo "::set-output name=model_bucket::$(terraform output model_bucket | xargs)"                  
          echo "::set-output name=lambda_function::$(terraform output lambda_function | xargs)"                  

      # Build and push to ECR
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      
      - name: Build, tag, and push image to ECR
        id: build-image-step
        working-directory: "testing/06-best-practices/code"
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.tf-apply.outputs.ecr_repo }}
          IMAGE_TAG: "latest"
        run: |
          docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image_uri::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # Deploy
      - name: Get model artifacts
        id: get-model-artifacts
        working-directory: "testing/06-best-practices/code"
        env:
            MODEL_BUCKET_DEV: "mlflow-models-magnus-dev"
            MODEL_BUCKET_PROD: ${{ steps.tf-apply.outputs.model_bucket }}
        run: |
          export RUN_ID=$(aws s3api list-objects-v2 --bucket ${MODEL_BUCKET_DEV} \
            --query 'sort_by(Contents, &LastModified)[-1].Key' --output=text | cut -f2 -d/)
          aws s3 sync s3://${MODEL_BUCKET_DEV} s3://${MODEL_BUCKET_PROD}
          echo "::set-output name=run_id::${RUN_ID}"
          
      - name: Update lambda
        id: update-lambda
        env:
          LAMBDA_FUNCTION: ${{ steps.tf-apply.outputs.lambda_function }}
          PREDICTIONS_STREAM_NAME: ${{ steps.tf-apply.outputs.predictions_stream_name }}
          MODEL_BUCKET: ${{ steps.tf-apply.outputs.model_bucket }}
          RUN_ID: ${{ steps.get-model-artifacts.outputs.run_id }}
        run: |
          variables="{ \
            PREDICTIONS_STREAM_NAME=${PREDICTIONS_STREAM_NAME}, \
            MODEL_BUCKET=${MODEL_BUCKET}, \
            MLFLOW_EXPERIMENT_ID=${RUN_ID}\
            }" 

          STATE=$(aws lambda get-function  --function-name $LAMBDA_FUNCTION --region "us-east-1" --query 'Configuration.LastUpdateStatus' --output text)
          while [[ "$STATE" == "InProgress" ]]
          do
            echo "sleep 5sec ...."
            sleep 5s
            STATE=$(aws lambda get-function  --function-name $LAMBDA_FUNCTION --region "us-east-1" --query 'Configuration.LastUpdateStatus' --output text)
            echo $STATE
          done

          aws lambda update-function-configuration --function-name ${LAMBDA_FUNCTION} --environment "Variables=${variables}"




